// Copyright 2019 The Exonum Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! This crate simplifies writing build.rs for exonum and exonum services.

#![deny(unsafe_code, bare_trait_objects)]
#![warn(missing_docs, missing_debug_implementations)]

use proc_macro2::{Ident, Span};
use protoc_rust::Customize;
use quote::{quote, ToTokens};
use walkdir::WalkDir;

use std::{
    env,
    fs::File,
    io::{Read, Write},
    path::{Path, PathBuf},
};

/// Enum represents various sources of protobuf files.
#[derive(Debug, Copy, Clone)]
pub enum ProtoSources<'a> {
    /// Path to exonum core protobuf files.
    Exonum,
    /// Path to exonum crypto protobuf files.
    Crypto,
    /// Path to common protobuf files.
    Common,
    /// Path to manually specified protobuf sources.
    Path(&'a str),
}

impl<'a> ProtoSources<'a> {
    /// Returns path to protobuf files.
    pub fn path(&self) -> String {
        match self {
            ProtoSources::Exonum => get_exonum_protobuf_files_path(),
            ProtoSources::Common => get_exonum_protobuf_common_files_path(),
            ProtoSources::Crypto => get_exonum_protobuf_crypto_files_path(),
            ProtoSources::Path(path) => path.to_string(),
        }
    }

    /// Most frequently used combination of proto dependencies.
    /// TODO: maybe find a better name.
    pub fn frequently_used() -> Vec<Self> {
        vec![
            ProtoSources::Exonum,
            ProtoSources::Crypto,
            ProtoSources::Common,
        ]
    }
}

impl<'a> From<&'a str> for ProtoSources<'a> {
    fn from(path: &'a str) -> Self {
        ProtoSources::Path(path)
    }
}

/// Finds all .proto files in `path` and subfolders and returns a vector of their paths.
fn get_proto_files<P: AsRef<Path>>(path: &P) -> Vec<PathBuf> {
    WalkDir::new(path)
        .into_iter()
        .filter_map(|e| {
            let e = e.ok()?;
            if e.path().extension()?.to_str() == Some("proto") {
                Some(e.path().into())
            } else {
                None
            }
        })
        .collect()
}

/// Includes all .proto files with their names into generated file as array of tuples,
/// where tuple content is (file_name, file_content).
fn include_proto_files(proto_files: &[PathBuf]) -> impl ToTokens {
    let proto_files_len = proto_files.len();
    // TODO Think about syn crate and token streams instead of dirty strings.
    let proto_files = proto_files.iter().map(|path| {
        let name = path
            .file_name()
            .unwrap()
            .to_str()
            .expect(".proto file name is not convertible to &str");

        let mut content = String::new();
        File::open(path)
            .expect("Unable to open .proto file")
            .read_to_string(&mut content)
            .expect("Unable to read .proto file");

        quote! {
            (#name, #content),
        }
    });

    quote! {
        /// Original proto files which were be used to generate this module.
        /// First element in tuple is file name, second is proto file content.
        #[allow(dead_code)]
        pub const PROTO_SOURCES: [(&str, &str); #proto_files_len] = [
            #( #proto_files )*
        ];
    }
}

/// Collects .rs files generated by the rust-protobuf into single module.
///
/// - If module name is `tests` it adds `#[cfg(test)]` to declaration.
/// - Also this method includes source files as `PROTO_SOURCES` constant.
fn generate_mod_rs<P: AsRef<Path>, Q: AsRef<Path>>(
    out_dir: P,
    proto_files: &[PathBuf],
    mod_file: Q,
) {
    let mod_files = {
        proto_files.iter().map(|f| {
            let mod_name = f
                .file_stem()
                .unwrap()
                .to_str()
                .expect(".proto file name is not convertible to &str");

            let mod_name = Ident::new(mod_name, Span::call_site());
            if mod_name == "tests" {
                quote! {
                    #[cfg(test)] pub mod #mod_name;
                }
            } else {
                quote! {
                    pub mod #mod_name;
                }
            }
        })
    };
    let proto_files = include_proto_files(proto_files);

    let content = quote! {
        #( #mod_files )*
        #proto_files
    };

    let dest_path = out_dir.as_ref().join(mod_file);
    let mut file = File::create(dest_path).expect("Unable to create output file");
    file.write_all(content.into_token_stream().to_string().as_bytes())
        .expect("Unable to write data to file");
}

/// Generates .rs files from .proto files.
///
/// `protoc` executable from protobuf should be in `$PATH`
///
/// # Examples
///
/// In `build.rs`
/// ```no_run
///use exonum_build::ProtobufGenerator;
///
///ProtobufGenerator::with_mod_name("exonum_tests_proto_mod.rs")
///   .with_input_dir("src/proto")
///   .add_path("src/proto") // Includes usually should contain input_dir.
///   .with_crypto()
///   .with_common()
///   .generate();
/// ```
/// After successful run `$OUT_DIR` will contain \*.rs for each \*.proto file in
/// "src/proto/\*\*/" and example_mod.rs which will include all generated .rs files
/// as submodules.
///
/// To use generated protobuf structs.
///
/// In `src/proto/mod.rs`
/// ```ignore
/// extern crate exonum;
///
/// include!(concat!(env!("OUT_DIR"), "/example_mod.rs"));
///
/// // If you use types from `exonum` .proto files.
/// use exonum::proto::schema::*;
/// ```
#[derive(Debug)]
pub struct ProtobufGenerator<'a> {
    includes: Vec<ProtoSources<'a>>,
    mod_name: &'a str,
    input_dir: &'a str,
}

impl<'a> ProtobufGenerator<'a> {
    /// Name of the rust module generated from input proto files.
    ///
    /// # Panics
    ///
    /// If the `mod_name` is empty.
    pub fn with_mod_name(mod_name: &'a str) -> Self {
        assert!(!mod_name.is_empty(), "Mod name is not specified");
        Self {
            includes: Vec::new(),
            input_dir: "",
            mod_name,
        }
    }

    /// Directory containing input protobuf files.
    pub fn with_input_dir(mut self, path: &'a str) -> Self {
        self.input_dir = path;
        self
    }

    /// Directory containing proto files that will be included.
    pub fn add_path(mut self, path: &'a str) -> Self {
        self.includes.push(ProtoSources::Path(path));
        self
    }

    /// Convenience method to specify the most frequently used include directories.
    pub fn with_frequently_used(mut self) -> Self {
        self.includes.extend(ProtoSources::frequently_used());
        self
    }

    /// Common types for all crates.
    pub fn with_common(mut self) -> Self {
        self.includes.push(ProtoSources::Common);
        self
    }

    /// Proto files from `exonum-crypto` crate (`Hash`, `PublicKey`, etc..).
    pub fn with_crypto(mut self) -> Self {
        self.includes.push(ProtoSources::Crypto);
        self
    }

    /// Exonum core related proto files,
    pub fn with_exonum(mut self) -> Self {
        self.includes.push(ProtoSources::Exonum);
        self
    }

    /// Add multiple include directories.
    pub fn with_includes(mut self, includes: &'a [ProtoSources]) -> Self {
        self.includes.extend_from_slice(includes);
        self
    }

    /// Generate proto files from specified sources.
    ///
    /// # Panics
    ///
    /// If the `input_dir` or `includes` are empty.
    pub fn generate(self) {
        assert!(!self.input_dir.is_empty(), "Input dir is not specified");
        assert!(!self.includes.is_empty(), "Includes are not specified");
        protobuf_generate(self.input_dir, &self.includes, self.mod_name);
    }
}

fn protobuf_generate<P, T>(input_dir: P, includes: &[ProtoSources], mod_file_name: T)
where
    P: AsRef<Path>,
    T: AsRef<str>,
{
    let out_dir = env::var("OUT_DIR")
        .map(PathBuf::from)
        .expect("Unable to get OUT_DIR");

    let proto_files = get_proto_files(&input_dir);
    generate_mod_rs(&out_dir, &proto_files, &mod_file_name.as_ref());

    // Converts paths to strings and adds input dir to includes.
    let mut includes: Vec<_> = includes.iter().map(ProtoSources::path).collect();

    includes.push(
        input_dir
            .as_ref()
            .to_str()
            .expect("Input dir name is not convertible to &str")
            .into(),
    );

    let includes: Vec<&str> = includes.iter().map(String::as_str).collect();

    protoc_rust::run(protoc_rust::Args {
        out_dir: out_dir
            .to_str()
            .expect("Out dir name is not convertible to &str"),
        input: &proto_files
            .iter()
            .map(|s| s.to_str().expect("File name is not convertible to &str"))
            .collect::<Vec<_>>(),
        includes: &includes,
        customize: Customize {
            serde_derive: Some(true),
            ..Default::default()
        },
    })
    .expect("protoc");
}

/// Get path to the folder containing `exonum` protobuf files.
///
/// Needed for code generation of .proto files which import `exonum` provided .proto files.
fn get_exonum_protobuf_files_path() -> String {
    env::var("DEP_EXONUM_PROTOBUF_PROTOS").expect("Failed to get exonum protobuf path")
}

/// Get path to the folder containing `exonum-crypto` protobuf files.
fn get_exonum_protobuf_crypto_files_path() -> String {
    env::var("DEP_EXONUM_PROTOBUF_CRYPTO_PROTOS")
        .expect("Failed to get exonum crypto protobuf path")
}

/// Get path to the folder containing `exonum-proto` protobuf files.
fn get_exonum_protobuf_common_files_path() -> String {
    env::var("DEP_EXONUM_PROTOBUF_COMMON_PROTOS")
        .expect("Failed to get exonum common protobuf path")
}
