// Copyright 2019 The Exonum Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "types.proto";
import "common.proto";
import "google/protobuf/timestamp.proto";

package exonum.tests;

message TxSimple {
  exonum.crypto.PublicKey public_key = 1;
  string msg = 2;
}

message TestServiceInit { string msg = 1; }

message BlockchainTestTxB {
  uint64 b = 1;
  uint32 c = 2;
}

message CreateWallet {
  exonum.crypto.PublicKey pubkey = 1;
  string name = 2;
}

message Transfer {
  exonum.crypto.PublicKey from = 1;
  exonum.crypto.PublicKey to = 2;
  uint64 amount = 3;
}

message Point {
  uint32 x = 1;
  uint32 y = 2;
}

message TestProtobufConvert {
  exonum.crypto.PublicKey key = 1;
  exonum.crypto.Hash hash = 2;
  uint32 unsigned_32 = 3;
  uint64 unsigned_64 = 4;
  int32 regular_i32 = 5;
  int64 regular_i64 = 6;
  fixed32 fixed_u32 = 7;
  fixed64 fixed_u64 = 8;
  sfixed32 fixed_i32 = 9;
  sfixed64 fixed_i64 = 10;
  float float_32 = 11;
  double float_64 = 12;
  bool boolean = 13;
  sint32 s_i32 = 14;
  sint64 s_i64 = 15;
  bytes bytes_field = 16;
  string string_field = 17;
  Point message_field = 18;
  exonum.common.BitVec bit_vec = 19;
  google.protobuf.Timestamp time = 20;
}

message TestProtobufConvertRepeated {
  repeated exonum.crypto.PublicKey keys = 1;
  repeated bytes bytes_array = 2;
  repeated string string_array = 3;
  repeated uint32 num_array = 4;
}

message TestProtobufConvertMap {
  map<uint32, uint64> num_map = 1;
  map<uint32, string> string_map = 2;
  map<uint32, bytes> bytes_map = 4;
  map<uint32, Point> point_map = 5;
  map<string, uint64> key_string_map = 6;
}

message TestFixedArrays {
  bytes fixed_array_8 = 1;
  bytes fixed_array_16 = 2;
  bytes fixed_array_32 = 3;
}

message TestServiceInfo {
  uint32 instance_id = 1;
  uint32 runtime_id = 2;
  string name = 3;
}

message TestActiveServices {
  repeated TestServiceInfo services = 1;
}
