// Copyright 2019 The Exonum Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package exonum.runtime;

option java_package = "com.exonum.core.messages";

import "blockchain.proto";
import "google/protobuf/empty.proto";

// Unique service transaction identifier.
message CallInfo {
  // Unique service instance identifier. The dispatcher uses this identifier to
  // find the corresponding runtime to execute a transaction.
  uint32 instance_id = 1;
  // Identifier of the method in the service interface required for the call.
  uint32 method_id = 2;
}

message AnyTx {
  CallInfo call_info = 1;
  bytes arguments = 2;
}

message ArtifactId {
  uint32 runtime_id = 1;
  string name = 2;
}

message ArtifactSpec {
  ArtifactId artifact = 1;
  bytes payload = 2;
}

message InstanceSpec {
  uint32 id = 1;
  string name = 2;
  ArtifactId artifact = 3;
}

message InstanceInitParams {
  InstanceSpec instance_spec = 1;
  bytes constructor = 2;
}

message GenesisConfig {
  exonum.Config consensus_config = 1;
  repeated ArtifactSpec artifacts = 2;
  repeated InstanceInitParams builtin_instances = 3;
}

// The kind of ExecutionError.
enum ErrorKind {
  UNEXPECTED = 0;
  DISPATCHER = 1;
  RUNTIME = 2;
  SERVICE = 3;
}

// Result of unsuccessful runtime execution.
message ExecutionError {
  // The kind of error that indicates in which module the error occurred.
  ErrorKind kind = 1;
  // User defined error code that can have different meanings for the different
  // error kinds.
  uint32 code = 2;
  // Optional description which doesn't affect `object_hash`.
  string description = 3;

  oneof runtime {
    // Runtime identifier associated with the error.
    uint32 runtime_id = 4;
    // The runtime associated with the error is unknown.
    google.protobuf.Empty no_runtime_id = 5;
  }

  oneof call_info {
    CallSite call_site = 6;
    google.protobuf.Empty no_call_site = 7;
  }
}

// Call site associated with an error.
message CallSite {
  enum Type {
    // Service method.
    METHOD = 0;
    // Service constructor.
    CONSTRUCTOR = 1;
    // Hook executing before processing transactions in a block.
    BEFORE_TRANSACTIONS = 2;
    // Hook executing after processing transactions in a block.
    AFTER_TRANSACTIONS = 3;
  }

  // Type of the call.
  Type call_type = 1;
  // Identifier of the service being called.
  uint32 instance_id = 2;
  // Numeric ID of the method. Set only for `call_type == METHOD`.
  uint32 method_id = 3;
  // Name of the interface defining the method. This field is empty for the
  // default service interface. Set only for `call_type == METHOD`.
  string interface = 4;
}

// Result of runtime execution.
message ExecutionStatus {
  oneof result {
    google.protobuf.Empty ok = 1;
    ExecutionError error = 2;
  }
}

// Current state of artifact in dispatcher.
message ArtifactState {
  // Status of an artifact deployment.
  enum Status {
    // Reserved for the further usage. 
    NONE = 0;
    // The artifact is pending deployment.
    PENDING = 1;
    // The artifact has been successfully deployed.
    ACTIVE = 2;
  }
  // Artifact specification.
  exonum.runtime.ArtifactSpec spec = 1;
  // Artifact deployment status.
  Status status = 2;
}

// Current state of service instance in dispatcher.
message InstanceState {
  // Status of a service instance.
  enum Status {
    // The service instance has no status, i.e. this value corresponds to
    // `Option::None` on the Rust code level and other corresponds to
    // `Some(...)`.
    NONE = 0;
    // The service instance is active.
    ACTIVE = 1;
    // The service instance is stopped.
    STOPPED = 2;
  }
  // Service instance specification.
  exonum.runtime.InstanceSpec spec = 1;
  // Service instance activity status.
  Status status = 2;
  // Pending status of instance if the value is not `NONE`.
  Status pending_status = 3;
}
