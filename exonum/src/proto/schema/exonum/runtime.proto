// Copyright 2020 The Exonum Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package exonum.runtime;

option java_package = "com.exonum.core.messages";

import "blockchain.proto";
import "types.proto";
import "google/protobuf/empty.proto";

// Unique service transaction identifier.
message CallInfo {
  // Unique service instance identifier. The dispatcher uses this identifier to
  // find the corresponding runtime to execute a transaction.
  uint32 instance_id = 1;
  // Identifier of the method in the service interface required for the call.
  uint32 method_id = 2;
}

message AnyTx {
  CallInfo call_info = 1;
  bytes arguments = 2;
}

message ArtifactId {
  uint32 runtime_id = 1;
  string name = 2;
  string version = 3;
}

message ArtifactSpec {
  // Information uniquely identifying the artifact.
  ArtifactId artifact = 1;
  // Runtime-specific artifact payload.
  bytes payload = 2;
}

message InstanceSpec {
  uint32 id = 1;
  string name = 2;
  ArtifactId artifact = 3;
}

message InstanceInitParams {
  InstanceSpec instance_spec = 1;
  bytes constructor = 2;
}

message GenesisConfig {
  exonum.Config consensus_config = 1;
  repeated ArtifactSpec artifacts = 2;
  repeated InstanceInitParams builtin_instances = 3;
}

// The type of ExecutionError.
// Note that ErrorKind isn't a primary source for determining the origin of the error.
// First, see the 'runtime_id' and 'call_site' fields of ExecutionError, and only then
// you can rely on `ErrorKind` to resolve ambiguity.
enum ErrorKind {
  // An unexpected error which does not have a specific cause.
  // The description of the error is the only source of information about this kind of errors.
  UNEXPECTED = 0;
  // An error specific to the core. See core error codes for details.
  CORE = 1;
  // An error specific to the certain runtime. See error codes of corresponding runtime for details.
  RUNTIME = 2;
  // An error specific to the certain service. See error codes of corresponding service for details.
  SERVICE = 3;
  // A common error which can occur in different contexts. See common error codes for details.
  COMMON = 4;
}

// Result of unsuccessful runtime execution.
//
// ExecutionError message provides the information about the source of the error.
// The source of error is determined as following:
// - If both runtime ID and call site are set, then error is related to the service code.
// - If runtime ID is set, and call site is not set, then error is related to the runtime code.
// - If none of runtime ID and call site is set, then error originates in the core code.
// Option with set call site and unset runtime ID is not valid, receiving a message
// with such a combination means receiving a malformed message.
//
// Though in most cases 'runtime_id' and 'call_site' are enough to deduce the source of error,
// 'ErrorKind' type can be used to resolve ambiguity.
message ExecutionError {
  // The kind of error that indicates its type.
  ErrorKind kind = 1;
  // User defined error code that can have different meanings for the different
  // error kinds.
  uint32 code = 2;
  // Optional description which doesn't affect `object_hash`.
  string description = 3;

  // Runtime ID will be set if the error is related to the certain runtime.
  oneof runtime {
    // Identifier of runtime associated with the error.
    uint32 runtime_id = 4;
    // There was no runtime to process an erroneous call.
    google.protobuf.Empty no_runtime_id = 5;
  }

  // Call site will be set if the error is related to the certain service.
  oneof call_info {
    // Information about service call associated with the error.
    CallSite call_site = 6;
    // There was no service to process an erroneous call.
    google.protobuf.Empty no_call_site = 7;
  }
}

// Call site associated with an error.
message CallSite {
  enum Type {
    // Service method.
    METHOD = 0;
    // Service constructor.
    CONSTRUCTOR = 1;
    // Hook executing before processing transactions in a block.
    BEFORE_TRANSACTIONS = 2;
    // Hook executing after processing transactions in a block.
    AFTER_TRANSACTIONS = 3;
  }

  // Type of the call.
  Type call_type = 1;
  // Identifier of the service being called.
  uint32 instance_id = 2;
  // Numeric ID of the method. Set only for `call_type == METHOD`.
  uint32 method_id = 3;
  // Name of the interface defining the method. This field is empty for the
  // default service interface. Set only for `call_type == METHOD`.
  string interface = 4;
}

// Result of runtime execution.
message ExecutionStatus {
  oneof result {
    // Successful execution.
    google.protobuf.Empty ok = 1;
    // Execution ended with an error.
    ExecutionError error = 2;
  }
}

// Current state of artifact in dispatcher.
message ArtifactState {
  // Status of an artifact deployment.
  enum Status {
    // Reserved for the further usage.
    NONE = 0;
    // The artifact is pending deployment.
    PENDING = 1;
    // The artifact has been successfully deployed.
    ACTIVE = 2;
  }

  // Runtime-specific artifact specification.
  bytes deploy_spec = 1;
  // Artifact deployment status.
  Status status = 2;
}

message InstanceStatus {
  enum Simple {
    // The service instance has no status, i.e. this value corresponds to
    // `Option::None` on the Rust code level and other corresponds to
    // `Some(...)`.
    NONE = 0;
    // The service instance is active.
    ACTIVE = 1;
    // The service instance is stopped.
    STOPPED = 2;
  }

  oneof status {
    // Service has a status from the `Simple` enum.
    Simple simple = 1;
    // Service is in process of migration.
    InstanceMigration migration = 2;
  }
}

message InstanceMigration {
  // Migration target to obtain migration scripts from. This artifact
  // must be deployed on the blockchain.
  ArtifactId target = 1;
  // Version of the instance data after the migration is completed.
  // Note that it does not necessarily match the version of `target`,
  // but should be not greater.
  string end_version = 2;
  // Consensus-wide outcome of the migration, in the form of
  // the aggregation hash of the migrated data.
  // The lack of value signifies that the migration is not finished yet.
  exonum.crypto.Hash completed_hash = 3;
}


// Current state of service instance in dispatcher.
message InstanceState {
  // Service instance specification.
  exonum.runtime.InstanceSpec spec = 1;
  // Service instance activity status.
  InstanceStatus status = 2;
  // Pending status of instance if the value is not `NONE`.
  InstanceStatus pending_status = 3;
  // Version of the service data. The empty value means that the data version
  // is the same as the `spec.artifact`. Non-empty value means that one or more
  // data migrations have been performed on the service, so that the service data
  // is compatible with a newer artifact.
  string data_version = 4;
}

// Local result of a migration.
message MigrationStatus {
  oneof result {
    // Hash of the successfully migrated data.
    exonum.crypto.Hash hash = 1;
    // Human-readable description of an error that has occurred
    // during migration.
    string error = 2;
  }
}

// Information about a modified service instance.
message ModifiedInstanceInfo {
  enum MigrationTransition {
    NONE = 0;
    START = 1;
    COMMIT = 2;
    ROLLBACK = 3;
  }

  MigrationTransition migration_transition = 1;
}
