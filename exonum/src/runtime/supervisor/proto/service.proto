// Copyright 2019 The Exonum Team
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package exonum.service.supervisor;

import "runtime.proto";
import "blockchain.proto";
import "google/protobuf/any.proto";

// Types

message ServiceConfig {
  uint32 instance_id = 1;
  bytes params = 2;
}

message ConfigChange {
  oneof message {
    exonum.Config consensus = 1;
    ServiceConfig service = 2;
  }
}

// Transactions

// Request for the artifact deployment.
message DeployRequest {
    // Artifact identifier.
    exonum.runtime.ArtifactId artifact = 1;
    // Additional information for Runtime to deploy.
    bytes spec = 2;
    // The height until which the deployment procedure should be completed.
    uint64 deadline_height = 3;
}

// Confirmation that the artifact was successfully deployed by the validator.
message DeployConfirmation {
    // Artifact identifier.
    exonum.runtime.ArtifactId artifact = 1;
    // Additional information for Runtime to deploy.
    bytes spec = 2;
    // The height until which the deployment procedure should be completed.
    uint64 deadline_height = 3;
}

// Request for the start service instance
message StartService {
    // Artifact identifier.
    exonum.runtime.ArtifactId artifact = 1;
    // Instance name.
    string name = 2;
    // Instance configuration.
    bytes config = 3;
    // The height until which the start service procedure should be completed.
    uint64 deadline_height = 4;
}

// Request for the configuration change
message ConfigPropose {
    uint64 actual_from = 1;
    repeated ConfigChange changes = 2;
}

message ConfigVote {
    exonum.Hash propose_hash = 1;
    bool decision = 2;
}
