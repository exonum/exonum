on:
  pull_request:
  push:
    branches:
    - master
    - develop

name: CI

env:
  rust: 1.64.0

jobs:
  partial_unit_tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [ Linux, MacOS, Windows ]
        include:
          - build: Linux
            os: ubuntu-latest
          - build: MacOS
            os: macos-latest
          - build: Windows
            os: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: runner.os == 'Windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - if: runner.os == 'Linux'
        run: sudo apt-get install protobuf-compiler libprotobuf-dev librocksdb-dev
      - if: runner.os == 'Windows'
        run: |
          choco install protoc minisign -y
          echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - if: runner.os == 'MacOS'
        run: brew install libsodium rocksdb pkg-config protobuf
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
      # Not enough space on a VM to test with param: --all-targets
      - name: Run on Unix
        if: runner.os != 'Windows'
        run: | 
            cargo test -p exonum -p exonum-rust-runtime -p exonum-crypto -p exonum-cli -p exonum-keys -p exonum-node \
                -p exonum-testkit -p exonum-api -p exonum-system-api -p exonum-explorer-service --tests
      - name: Run on Windows
        if: runner.os == 'Windows'
        run: |
            cargo test -p exonum -p exonum-rust-runtime -p exonum-crypto -p exonum-cli -p exonum-keys -p exonum-node --tests
        env:
          RUST_BACKTRACE: full

  merkle_db_unit_tests:
    name: MerkleDB Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        tempdb: [ memory, persisted ]
        build: [ Linux, MacOS, Windows ]
        include:
          - build: Linux
            os: ubuntu-latest
          - build: MacOS
            os: macos-latest
          - build: Windows
            os: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: runner.os == 'Windows'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - if: runner.os == 'Linux'
        run: sudo apt-get install protobuf-compiler libprotobuf-dev librocksdb-dev
      - if: runner.os == 'Windows'
        run: |
          choco install protoc minisign -y
          echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      - if: runner.os == 'MacOS'
        run: brew install libsodium rocksdb pkg-config protobuf
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
      - name: Run with db in memory
        if: ${{ matrix.tempdb == 'memory' }}
        run: cd components/merkledb && cargo test --all-targets
      - name: Run with persisted db
        if: ${{ matrix.tempdb == 'persisted' }}
        run: cd components/merkledb && cargo test --all-targets -F persisted_tempdb
        env:
          RUST_BACKTRACE: full

  doc-tests:
    name: Doc Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo apt-get install protobuf-compiler libprotobuf-dev librocksdb-dev
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --doc

  examples:
    name: Examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: sudo apt-get install protobuf-compiler libprotobuf-dev librocksdb-dev
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
      - run: cargo run -p exonum-merkledb --example manual_migration
      - run: cargo run -p exonum-merkledb --example migration_with_helper
      - run: cargo run -p exonum-merkledb --example migration_with_iter_loop
      - run: cargo run -p exonum-merkledb --example blockchain
      - run: cargo run -p exonum-sample-runtime
      - run: cargo run -p exonum-explorer --example explorer
      - run: cargo run -p exonum-testkit --example timestamping
      - run: cargo run -p exonum-supervisor --example configuration_change
      - run: cargo run -p exonum-time --example simple_service
      - run: cargo run -p exonum-soak-tests --bin toggle -- -H 10
      - run: cargo run -p exonum-soak-tests --bin send_txs -- -T 100
      - run: cargo run -p exonum-soak-tests --bin sleepy -- -H 10
      - run: cargo run -p exonum-soak-tests --bin tx_filtering -- -H 10
      - run: cargo run -p exonum-keys --example key-generator -- -p passphrase -s a7839ea524f38d0e91a5ec96a723092719dc8a5b8a75f9131d9eb38f45e76344

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
          components: clippy
          profile: minimal
          override: true
      - name: Install Dependencies
        run: sudo apt-get install protobuf-compiler libprotobuf-dev librocksdb-dev
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust }}
          components: rustfmt
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
